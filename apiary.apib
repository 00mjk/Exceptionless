FORMAT: 1A
HOST: http://api.exceptionless.com/api/v1

# Exceptionless
Discover errors in your .NET app you never knew were happening and use detailed error reports to squash them with ease. Make your app Exceptionless!

# Group Event
Events related resources of the **Events API**

## Create [/event]
You can create an event by posting any string or json object.

### Create new event [POST]
You can post any JSON object to create an event. If we know how to handle it we will create a new event. If none of the JSON properties match the `event` object then we will create a new event and place your JSON object into the events data collection.

You can also post a multiline string. We automatically split strings by the `\n` character and create a new log event for every line.

+ Request Event from JSON (application/json)

        { "message": "Exceptionless is amazing!" }

+ Request Multiple events from string content (application/text)

        "Exceptionless is amazing!"
        "Exceptionless is really amazing!"

+ Response 200

## Get [/event/{id}]
### Get by id [GET]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    
+ Response 200 (application/json)

        {
          "id": "537b7255b77efe2474bfdd80",
          "organization_id": "537650f3b77efe23a47914f3",
          "project_id": "537650f3b77efe23a47914f4",
          "stack_id": "537b7255b77efe2474bfdd7f",
          "summary_html": null,
          "is_fixed": false,
          "is_hidden": false,
          "type": "log",
          "source": null,
          "tags": [],
          "message": "Exceptionless is amazing!",
          "data": {},
          "reference_id": null,
          "session_id": null,
          "is_critical": false,
          "is_not_found": false,
          "is_error": false
        }

## Get by organization [/event{?organization,before,after,limit}]
### List all events for an organization [GET]
+ Parameters
    + organization (optional, string, `537650f3b77efe23a47914f3`) ...The identifier of the organization.
    + before (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [
          {
            "id": "537b7255b77efe2474bfdd80",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "stack_id": "537b7255b77efe2474bfdd7f",
            "summary_html": null,
            "is_fixed": false,
            "is_hidden": false,
            "type": "log",
            "source": null,
            "tags": [],
            "message": "Exceptionless is amazing!",
            "data": {},
            "reference_id": null,
            "session_id": null,
            "is_critical": false,
            "is_not_found": false,
            "is_error": false
          }
        ]

## Get by project [/project/{projectId}/events{?before,after,limit}]
### List all events for a given project [GET]
+ Parameters
    + projectId (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + before (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [
          {
            "id": "537b7255b77efe2474bfdd80",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "stack_id": "537b7255b77efe2474bfdd7f",
            "summary_html": null,
            "is_fixed": false,
            "is_hidden": false,
            "type": "log",
            "source": null,
            "tags": [],
            "message": "Exceptionless is amazing!",
            "data": {},
            "reference_id": null,
            "session_id": null,
            "is_critical": false,
            "is_not_found": false,
            "is_error": false
          }
        ]
        
## Get by stack [/stack/{stackId}/events{?before,after,limit}]
### List all events for a given stack [GET]
+ Parameters
    + stackId (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.
    + before (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd80`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [
          {
            "id": "537b7255b77efe2474bfdd80",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "stack_id": "537b7255b77efe2474bfdd7f",
            "summary_html": null,
            "is_fixed": false,
            "is_hidden": false,
            "type": "log",
            "source": null,
            "tags": [],
            "message": "Exceptionless is amazing!",
            "data": {},
            "reference_id": null,
            "session_id": null,
            "is_critical": false,
            "is_not_found": false,
            "is_error": false
          }
        ]

# Group Organization
Organization related resources of the **Organization API**

## Create [/organization]
### Create new organization [POST]
+ Request (application/json)

        { "name": "Acme" }

+ Response 201 (application/json)

        { "id": "537650f3b77efe23a47914f3", "name": "Acme" }

## Get all [/organization{?before,after,limit}]
### List all organizations [GET]
+ Parameters
    + before (optional, string, `100650f3b77efe23a4791400`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `100650f3b77efe23a4791400`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{ "id": "537650f3b77efe23a47914f3", "name": "Acme" }]

## Get, Update, Remove [/organization/{id}]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.

### Get by id [GET]
+ Response 200 (application/json)
    
        { "id": "537650f3b77efe23a47914f3", "name": "Acme" }

### Update organization [PATCH]
+ Request (application/json)

        { "name": "Updated Acme" }

+ Response 200 (application/json)

        { "id": "537650f3b77efe23a47914f3", "name": "Updated Acme" }

### Remove organization [DELETE]
+ Response 204

## Manage users [/organization/{id}/user/{email}]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    + email (required, string, `noreply@exceptionless.com`) ... The email address of the user you wish to remove from your organization.

### Create new user [POST]
+ Response 200

### Remove user [DELETE]
+ Response 200

## Add custom data [/organization/{id}/data/{key}{?value}]
### Add custom data value [POST]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    + key (required, string, `zip-code`) ... The key name of the data object.
    + value (required, string, `90210`) ... Any string value.

+ Response 200

## Remove custom data [/organization/{id}/data/{key}]
### Remove custom data value [DELETE]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    + key (required, string, `zip-code`) ... The key name of the data object.
    
+ Response 200

## Check for unique name [/organization/check-name/{name}]
### Check for unique organization name [GET]
Returns a `404` status code if an existing orgnaization with the specified name does not exist.

+ Parameters
    + name (required, string, `Acme`) ... The organization name to check.

+ Response 404

# Group Project
Project related resources of the **Project API**

## Create [/project]
### Create new project [POST]
+ Request (application/json)

        { "organization_id": "537650f3b77efe23a47914f3", "name": "Disintegrating Pistol" }

+ Response 201 (application/json)

        { 
            "id": "537650f3b77efe23a47914f4",
            "organization_id": "537650f3b77efe23a47914f3",
            "name": "Disintegrating Pistol",
            "time_zone": "Central Standard Time",
            "api_keys": [
              "e3d51ea621464280bbcb79c11fd6483e"
            ],
            "configuration": {
              "version": 0,
              "settings": {
                "include_conditional_data": "true"
              }
            },
            "notification_settings": {
              "537b6e77b77efe102444053d": {
                "mode": 1,
                "send_daily_summary": true,
                "report_critical_errors": true,
                "report_regressions": true,
                "report404_errors": false,
                "report_known_bot_errors": false
              }
            },
            "data": {},
            "promoted_tabs": [],
            "custom_content": null,
            "stack_count": 1,
            "event_count": 1,
            "total_event_count": 1,
        }

## Get all [/project{?before,after,limit}]
### List all projects [GET]
+ Parameters
    + before (optional, string, `537650f3b77efe23a47914f4`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537650f3b77efe23a47914f4`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{ 
            "id": "537650f3b77efe23a47914f4",
            "organization_id": "537650f3b77efe23a47914f3",
            "name": "Disintegrating Pistol",
            "time_zone": "Central Standard Time",
            "api_keys": [
              "e3d51ea621464280bbcb79c11fd6483e"
            ],
            "configuration": {
              "version": 0,
              "settings": {
                "include_conditional_data": "true"
              }
            },
            "notification_settings": {
              "537b6e77b77efe102444053d": {
                "mode": 1,
                "send_daily_summary": true,
                "report_critical_errors": true,
                "report_regressions": true,
                "report404_errors": false,
                "report_known_bot_errors": false
              }
            },
            "data": {},
            "promoted_tabs": [],
            "custom_content": null,
            "stack_count": 1,
            "event_count": 1,
            "total_event_count": 1,
        }]

## Get by organization [/organization/{organizationId:objectid}/projects{?before,after,limit}]
### List all projects for a given organization [GET]
+ Parameters
    + organizationId (optional, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    + before (optional, string, `537650f3b77efe23a47914f4`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537650f3b77efe23a47914f4`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{ 
            "id": "537650f3b77efe23a47914f4",
            "organization_id": "537650f3b77efe23a47914f3",
            "name": "Disintegrating Pistol",
            "time_zone": "Central Standard Time",
            "api_keys": [
              "e3d51ea621464280bbcb79c11fd6483e"
            ],
            "configuration": {
              "version": 0,
              "settings": {
                "include_conditional_data": "true"
              }
            },
            "notification_settings": {
              "537b6e77b77efe102444053d": {
                "mode": 1,
                "send_daily_summary": true,
                "report_critical_errors": true,
                "report_regressions": true,
                "report404_errors": false,
                "report_known_bot_errors": false
              }
            },
            "data": {},
            "promoted_tabs": [],
            "custom_content": null,
            "stack_count": 1,
            "event_count": 1,
            "total_event_count": 1,
        }]

## Get, Update, Remove [/project/{id}]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.

### Get by id [GET]
+ Response 200 (application/json)

        { 
            "id": "537650f3b77efe23a47914f4",
            "organization_id": "537650f3b77efe23a47914f3",
            "name": "Disintegrating Pistol",
            "time_zone": "Central Standard Time",
            "api_keys": [
              "e3d51ea621464280bbcb79c11fd6483e"
            ],
            "configuration": {
              "version": 0,
              "settings": {
                "include_conditional_data": "true"
              }
            },
            "notification_settings": {
              "537b6e77b77efe102444053d": {
                "mode": 1,
                "send_daily_summary": true,
                "report_critical_errors": true,
                "report_regressions": true,
                "report404_errors": false,
                "report_known_bot_errors": false
              }
            },
            "data": {},
            "promoted_tabs": [],
            "custom_content": null,
            "stack_count": 1,
            "event_count": 1,
            "total_event_count": 1,
        }

### Update project [PATCH]
+ Request (application/json)

        { "name": "Updated Disintegrating Pistol" }

+ Response 201 (application/json)

        { 
            "id": "537650f3b77efe23a47914f4",
            "organization_id": "537650f3b77efe23a47914f3",
            "name": "Updated Disintegrating Pistol",
            "time_zone": "Central Standard Time",
            "api_keys": [
              "e3d51ea621464280bbcb79c11fd6483e"
            ],
            "configuration": {
              "version": 0,
              "settings": {
                "include_conditional_data": "true"
              }
            },
            "notification_settings": {
              "537b6e77b77efe102444053d": {
                "mode": 1,
                "send_daily_summary": true,
                "report_critical_errors": true,
                "report_regressions": true,
                "report404_errors": false,
                "report_known_bot_errors": false
              }
            },
            "data": {},
            "promoted_tabs": [],
            "custom_content": null,
            "stack_count": 1,
            "event_count": 1,
            "total_event_count": 1,
        }

### Remove project [DELETE]
+ Response 204

## Get default api key [/project/{id}/apikey/get-default]
### Get the default api key [GET]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    
+ Response 200 (application/json)

        { "key": "e3d51ea621464280bbcb79c11fd6483e" }

## Create api key [/project/{id}/apikey]
### Create a new api key [POST]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.

+ Response 200 (application/json)

        { "key": "100650f3b77efe23a4791411" }

## Remove api key [/project/{id}/apikey/{apikey}]
### Remove api key [DELETE]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + apikey (required, string, `100650f3b77efe23a4791411`) ... The api key that should be removed.

+ Response 200

## Reset project data [/project/{id}/reset-data]
### Reset project data [GET]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    
+ Response 200

## Get configuration settings [/project/{id}/config]
### Get the project configuration object [GET]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.

+ Response 200 (application/json)

        {
          "version": 0,
          "settings": {
            "include_conditional_data": "true"
          }
        }

## Add configuration setting [/project/{id}/config/{key}{?value}]
### Add configuration value [POST]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + key (required, string, `zip-code`) ... The key name of the config object.
    + value (required, string, `90210`) ... Any config value.

+ Response 200

## Remove configuration setting [/project/{id}/config/{key}]
### Remove configuration setting [DELETE]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + key (required, string, `zip-code`) ... The key name of the config object.
    
+ Response 200

## Add custom data [/project/{id}/data/{key}{?value}]
### Add custom data value [POST]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + key (required, string, `zip-code`) ... The key name of the data object.
    + value (required, string, `90210`) ... Any string value.

+ Response 200

## Remove custom data [/project/{id}/data/{key}]
### Remove custom data value [DELETE]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + key (required, string, `zip-code`) ... The key name of the data object.
    
+ Response 200

## Promoted Tabs [/project/{id}/promotedtabs/{name}]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + name (required, string, `Machine Info`) ... The tab name.

### Promote Tab [POST]
+ Response 200

### Demote Tab [DELETE]
+ Response 200

## Get all notification settings [/project/{id}/notification]
### Get the project's notification settings [GET]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    
+ Response 200 (application/json)

        {
          "537b6e77b77efe102444053d": {
            "mode": 1,
            "send_daily_summary": true,
            "report_critical_errors": true,
            "report_regressions": true,
            "report404_errors": false,
            "report_known_bot_errors": false
          },
          "537b6e77b77efe102444053e": {
            "mode": 2,
            "send_daily_summary": true,
            "report_critical_errors": true,
            "report_regressions": true,
            "report404_errors": false,
            "report_known_bot_errors": false
          }
        }
    
## User notification settings [/project/{id}/notification/{userId}]
+ Parameters
    + id (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + userId (required, string, `537b6e77b77efe102444053d`) ... A identifier of the user.

### Get user notification settings [GET]
+ Response 200 (application/json)

        {
            "mode": 1,
            "send_daily_summary": true,
            "report_critical_errors": true,
            "report_regressions": true,
            "report404_errors": false,
            "report_known_bot_errors": false
        }

### Set user notification settings [POST]
+ Request (application/json)

        {
            "mode": 2,
            "send_daily_summary": false,
            "report_critical_errors": true,
            "report_regressions": true,
            "report404_errors": false,
            "report_known_bot_errors": false
        }

+ Response 200

### Remove user notification settings [DELETE]
+ Response 200
    
## Check for unique name [/project/check-name/{name}]
### Check for unique project name [GET]
Returns a `404` status code if an existing project with the specified name does not exist.

+ Parameters
    + name (required, string, `Acme`) ... The organization name to check.

+ Response 404

# Group Project Hook
Project Hook related resources of the **Project Hook  API**

## Create [/projecthook]
### Create new project hook [POST]
To create a new project hook, you must specify project_id, url and event_types.

+ Request (application/json)

        { 
            "project_id": "537650f3b77efe23a47914f4", 
            "url": "http://exceptionless.com", 
            "event_types": ["NewError", "ErrorRegression", "CriticalError", "StackPromoted"] 
        }

+ Response 201 (application/json)

        {
            "id": "537b84cfb77efe2474072488",
            "project_id": "537650f3b77efe23a47914f4",
            "url": "http://exceptionless.com",
            "event_types": [
                "NewError",
                "ErrorRegression",
                "CriticalError",
                "StackPromoted"
            ]
        }

## Get, Update, Remove [/projecthook/{id}]
+ Parameters
    + id (required, string, `537b84cfb77efe2474072488`) ... The identifier of the project hook.

### Get by id [GET]
+ Response 200 (application/json)

        {
            "id": "537b84cfb77efe2474072488",
            "project_id": "537650f3b77efe23a47914f4",
            "url": "http://exceptionless.com",
            "event_types": [
                "NewError",
                "ErrorRegression",
                "CriticalError",
                "StackPromoted"
            ]
        }

### Update project hook [PATCH]
+ Request (application/json)

        { "url": "https://mycompanywebsite.com" }

+ Response 200 (application/json)

        {
            "id": "537b84cfb77efe2474072488",
            "project_id": "537650f3b77efe23a47914f4",
            "url": "https://mycompanywebsite.com",
            "event_types": [
                "NewError",
                "ErrorRegression",
                "CriticalError",
                "StackPromoted"
            ]
        }

### Remove project hook [DELETE]
+ Response 204

## Get by project [/project/{projectId}/projecthooks{?before,after,limit}]
### List all project hooks for a given project [GET]
+ Parameters
    + projectId (required, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + before (optional, string, `537b84cfb77efe2474072488`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b84cfb77efe2474072488`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{
            "id": "537b84cfb77efe2474072488",
            "project_id": "537650f3b77efe23a47914f4",
            "url": "http://exceptionless.com",
            "event_types": [
                "NewError",
                "ErrorRegression",
                "CriticalError",
                "StackPromoted"
            ]
        }]

# Group Stack
Stack related resources of the **Stack API**

## Get by organization [/stack{?organization,before,after,limit}]
### List all projects for a given organization [GET]

+ Parameters
    + organization (optional, string, `537650f3b77efe23a47914f3`) ... The identifier of the organization.
    + before (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
+ Response 200 (application/json)

        [{
            "id": "537b7255b77efe2474bfdd7f",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "signature_hash": "1c9c88d585f9f2ac9ed2371e5e69982cd7d342e3",
            "signature_info": {
              "type": "log"
            },
            "fixed_in_version": null,
            "date_fixed": null,
            "title": null,
            "summary_html": null,
            "total_occurrences": 1,
            "description": null,
            "disable_notifications": false,
            "is_hidden": false,
            "is_regressed": false,
            "occurrences_are_critical": false,
            "references": [],
            "tags": []
        }]

## Get newest by project [/project/{projectId}/stacks/new{?before,after,limit}]
### Get newest by project [GET]
+ Parameters
    + projectId (optional, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + before (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{
            "id": "537b7255b77efe2474bfdd7f",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "signature_hash": "1c9c88d585f9f2ac9ed2371e5e69982cd7d342e3",
            "signature_info": {
              "type": "log"
            },
            "fixed_in_version": null,
            "date_fixed": null,
            "title": null,
            "summary_html": null,
            "total_occurrences": 1,
            "description": null,
            "disable_notifications": false,
            "is_hidden": false,
            "is_regressed": false,
            "occurrences_are_critical": false,
            "references": [],
            "tags": []
        }]

## Get most recent by project [/project/{projectId}/stacks/recent{?before,after,limit}]
### Get most recent by project [GET]
+ Parameters
    + projectId (optional, string, `537650f3b77efe23a47914f4`) ... The identifier of the project.
    + before (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `before=obj_bar` in order to fetch the previous page of the list.
    + after (optional, string, `537b7255b77efe2474bfdd7f`) ... A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `after=obj_foo` in order to fetch the next page of the list.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.

+ Response 200 (application/json)

        [{
            "id": "537b7255b77efe2474bfdd7f",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "signature_hash": "1c9c88d585f9f2ac9ed2371e5e69982cd7d342e3",
            "signature_info": {
              "type": "log"
            },
            "fixed_in_version": null,
            "date_fixed": null,
            "title": null,
            "summary_html": null,
            "total_occurrences": 1,
            "description": null,
            "disable_notifications": false,
            "is_hidden": false,
            "is_regressed": false,
            "occurrences_are_critical": false,
            "references": [],
            "tags": []
        }]

## Get most frequent by project [/project/{projectId}/stacks/frequent{?page,limit,start,end,hidden,fixed,notfound}]
### Gets most frequent by project [GET]
+ Parameters
    + projectId (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the project.
    + page = `1` (optional, number, `1`) ... The `page` parameter is used for pagination. This value must be greater than 0.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
    + start (optional, date, `2015-01-1T00:00:00`) ... The starting date that the stats should be limited by. If start is not specified then thats will not be limited by a starting date.
    + end (optional, date, `2015-12-31T00:00:00`) ... The ending date that the stats should be limited by. If end is not specified then the current date will be used.
    + hidden = `false` (optional, boolean, `false`) ... Controls whether hidden events/stacks are included in the results.
    + fixed = `false` (optional, boolean, `false`) ... Controls whether fixed events/stacks are included in the results.
    + notfound = `false` (optional, boolean, `false`) ... Controls whether 404 events/stacks are included in the results.

+ Response 200 (application/json)

        [{
            "id": "537b7255b77efe2474bfdd7f",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "signature_hash": "1c9c88d585f9f2ac9ed2371e5e69982cd7d342e3",
            "signature_info": {
              "type": "log"
            },
            "fixed_in_version": null,
            "date_fixed": null,
            "title": null,
            "summary_html": null,
            "total_occurrences": 1,
            "description": null,
            "disable_notifications": false,
            "is_hidden": false,
            "is_regressed": false,
            "occurrences_are_critical": false,
            "references": [],
            "tags": []
        }]
        
## Get [/stack/{id}]
### Get by id [GET]
+ Parameters
    + id (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.

+ Response 200 (application/json)

        {
            "id": "537b7255b77efe2474bfdd7f",
            "organization_id": "537650f3b77efe23a47914f3",
            "project_id": "537650f3b77efe23a47914f4",
            "signature_hash": "1c9c88d585f9f2ac9ed2371e5e69982cd7d342e3",
            "signature_info": {
              "type": "log"
            },
            "fixed_in_version": null,
            "date_fixed": null,
            "title": null,
            "summary_html": null,
            "total_occurrences": 1,
            "description": null,
            "disable_notifications": false,
            "is_hidden": false,
            "is_regressed": false,
            "occurrences_are_critical": false,
            "references": [],
            "tags": []
        }

## Reset data [/stack/{id}/reset-data]
### Reset data [GET]
+ Parameters
    + id (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.

+ Response 200

## Mark fixed [/stack/{id}/mark-fixed]
+ Parameters
    + id (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.

### Mark fixed [POST]
+ Response 200

### Mark not fixed [DELETE]
+ Response 200

## Mark hidden [/stack/{id}/mark-hidden]
+ Parameters
    + id (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.

### Mark hidden [POST]
+ Response 200

### Mark not hidden [DELETE]
+ Response 200

## Promote [/stack/{id}/promote]
### Promote to external service [POST]
+ Parameters
    + id (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.

+ Response 200

## Add reference link [/stack/add-link]
### Add reference link [POST]
+ Request (application/json)

        { "stack": "537b7255b77efe2474bfdd7f", "link": "https://exceptionless.com" }

+ Response 200

# Group Stats
Stat related resources of the **Stats API**

## Get by project [/project/{projectId}/stats{?start,end,hidden,fixed,notfound}]
### Get stats for a given project [GET]
+ Parameters
    + projectId (required, string, `537650f3b77efe23a47914f3`) ... The identifier of the project.
    + start (optional, date, `2014-05-20T09:15:00`) ... The starting date that the stats should be limited by. If start is not specified then thats will not be limited by a starting date.
    + end (optional, date, `2014-05-21T00:00:00`) ... The ending date that the stats should be limited by. If end is not specified then the current date will be used.
    + hidden = `false` (optional, boolean, `false`) ... Controls whether hidden events/stacks are included in the results.
    + fixed = `false` (optional, boolean, `false`) ... Controls whether fixed events/stacks are included in the results.
    + notfound = `false` (optional, boolean, `false`) ... Controls whether 404 events/stacks are included in the results.

+ Response 200 (application/json)

        {
          "unique_total": 1,
          "new_total": 1,
          "most_frequent": null,
          "most_recent": null,
          "total_limited_by_plan": 0,
          "start_date": "2014-05-20T09:15:00-05:00",
          "end_date": "2014-05-21T00:00:00Z",
          "stats": [
            {
              "unique_total": 1,
              "new_total": 1,
              "date": "2014-05-20T09:15:00",
              "per_hour_average": 0.0,
              "total": 1
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T09:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T09:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T10:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T10:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T10:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T10:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T11:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T11:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T11:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T11:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T12:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T12:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T12:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T12:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T13:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T13:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T13:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T13:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T14:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T14:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T14:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T14:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T15:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T15:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T15:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T15:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T16:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T16:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T16:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T16:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T17:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T17:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T17:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T17:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T18:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T18:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T18:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T18:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T19:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T19:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T19:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T19:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T20:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T20:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T20:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T20:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T21:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T21:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T21:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T21:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T22:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T22:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T22:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T22:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T23:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T23:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T23:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-20T23:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "unique_total": 0,
              "new_total": 0,
              "date": "2014-05-21T00:00:00",
              "per_hour_average": 0.0,
              "total": 0
            }
          ],
          "per_day_average": 1.0,
          "per_hour_average": 0.1,
          "total": 1
        }

## Get by stack [/stack/{stackId}/stats{?start,end}]
### Get stats for a given stack [GET]
+ Parameters
    + stackId (required, string, `537b7255b77efe2474bfdd7f`) ... The identifier of the stack.
    + start (optional, date, `2014-05-20T09:15:00`) ... The starting date that the stats should be limited by. If start is not specified then thats will not be limited by a starting date.
    + end (optional, date, `2014-05-21T00:00:00`) ... The ending date that the stats should be limited by. If end is not specified then the current date will be used.

+ Response 200 (application/json)

        {
          "total_limited_by_plan": 0,
          "start_date": "2014-05-20T09:15:00-05:00",
          "end_date": "2014-05-21T00:00:00Z",
          "stats": [
            {
              "date": "2014-05-20T09:15:00",
              "per_hour_average": 0.0,
              "total": 1
            },
            {
              "date": "2014-05-20T09:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T09:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T10:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T10:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T10:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T10:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T11:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T11:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T11:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T11:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T12:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T12:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T12:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T12:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T13:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T13:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T13:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T13:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T14:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T14:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T14:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T14:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T15:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T15:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T15:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T15:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T16:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T16:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T16:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T16:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T17:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T17:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T17:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T17:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T18:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T18:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T18:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T18:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T19:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T19:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T19:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T19:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T20:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T20:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T20:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T20:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T21:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T21:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T21:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T21:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T22:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T22:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T22:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T22:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T23:00:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T23:15:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T23:30:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-20T23:45:00",
              "per_hour_average": 0.0,
              "total": 0
            },
            {
              "date": "2014-05-21T00:00:00",
              "per_hour_average": 0.0,
              "total": 0
            }
          ],
          "per_day_average": 1.0,
          "per_hour_average": 0.1,
          "total": 1
        }
        
# Group User
User related resources of the **Users API**

## Get by organization [/user/organization/{organizationId}{?page,limit}]
### List all users for an organization [GET]
+ Parameters
    + organizationId (optional, string, `537650f3b77efe23a47914f3`) ...The identifier of the organization.
    + page = `1` (optional, number, `1`) ... The `page` parameter is used for pagination. This value must be greater than 0.
    + limit = `10` (optional, number, `5`) ... A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
 
+ Response 200 (application/json)

        [{
            "id": "537b6e77b77efe102444053d",
            "email_address": "noreply@exceptionless.com",
            "full_name": "Test User",
            "is_email_address_verified": false,
            "is_invite": false,
            "has_admin_role": false
        }]
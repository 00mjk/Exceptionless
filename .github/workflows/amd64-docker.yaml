name: Build amd64 docker images
on:
  push:
    tags:        
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.*
        #dotnet-quality: preview
    - name: Build Reason
      env:
        GITHUB_EVENT: ${{ toJson(github) }}
      run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"
    - name: Build Version
      run: |
        dotnet tool install --global minver-cli --version 4.3.0
        version=$(minver --tag-prefix v)
        echo "MINVERVERSIONOVERRIDE=$version" >> $GITHUB_ENV
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "### Version: $version" >> $GITHUB_STEP_SUMMARY
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Publish CI Packages
      run: |
        echo "::remove-matcher owner=csc::"
        # tag and push docker image
        for image in {"api","job","app","exceptionless"}; do
          docker buildx build --target $image --platform linux/amd64 --output "type=image,push=true" . --tag exceptionless/$image-ci:$VERSION --tag exceptionless/$image-ci:latest --tag ghcr.io/exceptionless/exceptionless/$image:$VERSION --tag ghcr.io/exceptionless/exceptionless/$image:latest
        done
    - name: Publish Release Packages
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # tag and push docker image
        for image in {"api","job","app","exceptionless"}; do
          docker buildx build --target $image --platform linux/amd64 --output "type=image,push=true" . --tag exceptionless/$image:$VERSION --tag exceptionless/$image:latest
        done
